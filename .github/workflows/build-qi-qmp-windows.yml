name: Windows - Build QI-QMP (Qt 6.3.1)
on:
  workflow_call:
    secrets:
      qt_shared_dec_key:
        description: 'MEGA decryption key for Qt shared install archive URL'
        required: true
      qt_static_dec_key:
        description: 'MEGA decryption key for Qt static install archive URL'
        required: true
    outputs:
      qt_shared_artifact_name:
        description: "QI-QMP (Qt shared) build artifact"
        value: ${{ jobs.build-qi-qmp.outputs.qt_shared_artifact_name }}
      qt_static_artifact_name:
        description: "QI-QMP (Qt static) build artifact"
        value: ${{ jobs.build-qi-qmp.outputs.qt_static_artifact_name }}
env:
  qt_install_dir: ${{ github.workspace }}/Qt/Install
  qt_download_dir: ${{ github.workspace }}/Qt/Download
  qi_qmp_src_suffix: QI-QMP/Source
  qi_qmp_src_dir: ${{ github.workspace }}/QI-QMP/Source
  qi_qmp_build_dir: ${{ github.workspace }}/QI-QMP/Build

jobs:
  build-qi-qmp:
    name: Build QI-QMP - Windows (Debug/Release)
    strategy:
      matrix:
        qt_linkage: [shared, static]
    runs-on: windows-latest
    env:
      vs_dir: C:/Program Files/Microsoft Visual Studio/2022/Enterprise
      cmake_gen: Ninja Multi-Config
    outputs:
      qt_shared_artifact_name: ${{ steps.get_artifact_name.outputs.qt_shared_artifact_name }}
      qt_static_artifact_name: ${{ steps.get_artifact_name.outputs.qt_static_artifact_name }}
    steps:
    - name: Set matrix derived variables
      uses: kanga333/variable-mapper@v0.2.2
      with:
        key: ${{ matrix.qt_linkage }}
        map: |
          {
            "shared": {
              "qt_install_name": "qt-Production-6.3.1-win32-msvc-x64-shared-release.7z",
              "qt_install_url": "https://mega.nz/file/h7ZgWSRa",
              "qt_install_url_key": "${{ secrets.qt_shared_dec_key }}",
              "artifact_output_var": "qt_shared_artifact_name"
            },
            "static": {
              "qt_install_name": "qt-Production-6.3.1-win32-msvc-x64-static-release.7z",
              "qt_install_url": "https://mega.nz/file/h2RWCKhS",
              "qt_install_url_key": "${{ secrets.qt_static_dec_key }}",
              "artifact_output_var": "qt_static_artifact_name"
            }
          }
        export_to: env,log
    - name: Set derived variables with shell because GitHub Actions env context sucks
      run: |
        echo "qt_install_dest=${{ env.qt_download_dir }}/${{ env.qt_install_name }}" >> $Env:GITHUB_ENV
        echo "qi_qmp_package_path=${{ env.qi_qmp_build_dir }}/out/dist" >> $Env:GITHUB_ENV
        $qi_qmp_install_path="${{ env.qi_qmp_build_dir }}/out/install"
        echo "qi_qmp_install_path=$qi_qmp_install_path" >> $Env:GITHUB_ENV
        echo "qt_cmake=${Env:qt_install_dir}/bin/qt-cmake.bat" >> $Env:GITHUB_ENV
    - name: Cache Qt Build
      id: cache-qt
      uses: actions/cache@v3
      with:
        path: ${{ env.qt_install_dir }}
        key: ${{ env.qt_install_name }}
    - name: Install megatools
      if: steps.cache-qt.outputs.cache-hit != 'true'
      run: choco install megatools
    - name: Create Qt Download Directory
      if: steps.cache-qt.outputs.cache-hit != 'true'
      run: New-Item -Path "${{ env.qt_download_dir }}" -ItemType "directory"
    - name: Download Qt Install
      if: steps.cache-qt.outputs.cache-hit != 'true'
      run: megatools dl "${Env:qt_install_url}#${Env:qt_install_url_key}" --path "${{ env.qt_download_dir }}"
    - name: Extract Qt Install
      if: steps.cache-qt.outputs.cache-hit != 'true'
      run: 7z x ${{ env.qt_install_dest }} -o${{ env.qt_install_dir }}
    - name: Install Doxygen & Graphviz
      run: |
        choco install doxygen.install --version 1.9.4
        choco install graphviz
    - name: Checkout QI-QMP
      uses: actions/checkout@v3
      with:
        path: ${{ env.qi_qmp_src_suffix }}
        fetch-depth: 0 # Required for verbose versioning to work correctly
    - name: Build/Install QI-QMP
      working-directory: ${{ env.qi_qmp_src_dir }}
      shell: cmd
      env:
        doxygen_root: C:\Program Files\doxygen # Required because of #42
      run: |
        echo "Setup C++ Build Environment..."
        CALL "${{ env.vs_dir }}\Common7\Tools\VsDevCmd.bat" -arch=amd64
        echo "Configure CMake using Qt wrapper..."
        CALL "${{ env.qt_cmake }}" -G "${{ env.cmake_gen }}" -S "${{ env.qi_qmp_src_dir}}" -B "${{ env.qi_qmp_build_dir }}" -D QI_QMP_DOCS_TARGET=ON -D Doxygen_ROOT="${{ env.doxygen_root }}"
        echo "Changing to build directory..."
        cd "%qi_qmp_build_dir%"
        echo "Building QI-QMP debug..."
        cmake --build . --target all --config Debug
        echo "Building QI-QMP release..."
        cmake --build . --target all --config Release
        echo "Building QI-QMP docs..."
        cmake --build . --target qi_qmp_docs --config Release
        echo "Installing QI-QMP Debug"
        cmake --build . --target install --config Debug
        echo "Installing QI-QMP Release/Docs..."
        cmake --build . --target install --config Release
        echo "Packaging QI-QMP..."
        cpack -C "Debug;Release"
        echo "Build complete."
    - name: Get QI-QMP artifact name
      id: get_artifact_name
      run: echo "::set-output name=${{ env.artifact_output_var }}::$((Get-ChildItem -Path "${{ env.qi_qmp_package_path }}" -Filter *.zip)[0].BaseName)"
    - name: Upload QI-QMP build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.get_artifact_name.outputs[env.artifact_output_var] }}
        path: ${{ env.qi_qmp_install_path }}
        if-no-files-found: error
