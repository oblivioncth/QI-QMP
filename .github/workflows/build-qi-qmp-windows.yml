name: Windows - Build QI-QMP
on:
  workflow_call:
    secrets:
      qt_ffynnon_cred:
        description: 'Credentials for getting Qt from Ffynnon'
        required: true
    outputs:
      qt_shared_artifact_name:
        description: "QI-QMP (Qt shared) build artifact"
        value: ${{ jobs.build-qi-qmp.outputs.qt_shared_artifact_name }}
      qt_static_artifact_name:
        description: "QI-QMP (Qt static) build artifact"
        value: ${{ jobs.build-qi-qmp.outputs.qt_static_artifact_name }}
env:
  qt_install_dir: ${{ github.workspace }}/Qt/Install
  qi_qmp_src_suffix: QI-QMP/Source
  qi_qmp_src_dir: ${{ github.workspace }}/QI-QMP/Source
  qi_qmp_build_dir: ${{ github.workspace }}/QI-QMP/Build

jobs:
  build-qi-qmp:
    name: Build QI-QMP - Windows (Debug/Release)
    strategy:
      matrix:
        qt_linkage: [shared, static]
    runs-on: windows-latest
    env:
      vs_dir: C:/Program Files/Microsoft Visual Studio/2022/Enterprise
      cmake_gen: Ninja Multi-Config
    outputs:
      qt_shared_artifact_name: ${{ steps.get_artifact_name.outputs.qt_shared_artifact_name }}
      qt_static_artifact_name: ${{ steps.get_artifact_name.outputs.qt_static_artifact_name }}
    steps:
    - name: Set derived variables with shell because GitHub Actions env context sucks
      run: |
        echo "qi_qmp_package_path=${{ env.qi_qmp_build_dir }}/out/dist" >> $Env:GITHUB_ENV
        $qi_qmp_install_path="${{ env.qi_qmp_build_dir }}/out/install"
        echo "qi_qmp_install_path=$qi_qmp_install_path" >> $Env:GITHUB_ENV
        echo "qt_cmake=${Env:qt_install_dir}/bin/qt-cmake.bat" >> $Env:GITHUB_ENV
    - name: Install Qt (custom build)
      uses: oblivioncth/actions/general/install-and-cache-qt-from-ffynnon@dev
      with:
        version: 6.4.0
        os: win32
        compiler: msvc
        linkage: ${{ matrix.qt_linkage }}
        path: ${{ env.qt_install_dir }}
        credentials: ${{ secrets.qt_ffynnon_cred }}
    - name: Install Doxygen & Graphviz
      run: |
        choco install doxygen.install --version 1.9.4
        choco install graphviz
    - name: Checkout QI-QMP
      uses: actions/checkout@v3
      with:
        path: ${{ env.qi_qmp_src_suffix }}
        fetch-depth: 0 # Required for verbose versioning to work correctly
    - name: Build/Install QI-QMP
      working-directory: ${{ env.qi_qmp_src_dir }}
      shell: cmd
      run: |
        echo "Setup C++ Build Environment..."
        CALL "${{ env.vs_dir }}\Common7\Tools\VsDevCmd.bat" -arch=amd64
        echo "Configure CMake using Qt wrapper..."
        CALL "${{ env.qt_cmake }}" -G "${{ env.cmake_gen }}" -S "${{ env.qi_qmp_src_dir}}" -B "${{ env.qi_qmp_build_dir }}" -D QI_QMP_DOCS_TARGET=ON"
        echo "Changing to build directory..."
        cd "%qi_qmp_build_dir%"
        echo "Building QI-QMP debug..."
        cmake --build . --target all --config Debug
        echo "Building QI-QMP release..."
        cmake --build . --target all --config Release
        echo "Building QI-QMP docs..."
        cmake --build . --target qi_qmp_docs --config Release
        echo "Installing QI-QMP Debug"
        cmake --build . --target install --config Debug
        echo "Installing QI-QMP Release/Docs..."
        cmake --build . --target install --config Release
        echo "Packaging QI-QMP..."
        cpack -C "Debug;Release"
        echo "Build complete."
    - name: Get QI-QMP artifact name
      id: get_artifact_name
      run: |
        $artifact_name=$((Get-ChildItem -Path "${{ env.qi_qmp_package_path }}" -Filter *.zip)[0].BaseName)
        echo "qi_qmp_current_artifact_name=$artifact_name" >> $Env:GITHUB_ENV
        echo "qt_${{ matrix.qt_linkage }}_artifact_name=$artifact_name" >> $Env:GITHUB_OUTPUT
    - name: Upload QI-QMP build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.qi_qmp_current_artifact_name }}
        path: ${{ env.qi_qmp_install_path }}
        if-no-files-found: error
